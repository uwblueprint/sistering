generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Entity {
  id               Int      @id @default(autoincrement())
  stringField      String   @map("string_field")
  intField         Int      @map("int_field")
  enumField        Letters  @map("enum_field")
  stringArrayField String[] @map("string_array_field")
  boolField        Boolean  @map("bool_field")
  fileName         String   @map("file_name")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("entities")
}

model User {
  id                    Int        @id @default(autoincrement())
  firstName             String     @map("first_name")
  lastName              String     @map("last_name")
  authId                String     @unique @map("auth_id")
  role                  Role
  phoneNumber           String?    @map("phone_number")
  employee              Employee?
  volunteer             Volunteer?
  signups               Signup[]
  emergencyContactName  String?    @map("emergency_contact_name")
  emergencyContactPhone String?    @map("emergency_contact_phone")
  emergencyContactEmail String?    @map("emergency_conatct_email")
  languages             Language[]
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt

  @@map("users")
}

enum Letters {
  A
  B
  C
  D
}

enum SignupStatus {
  PENDING
  CONFIRMED
  CANCELED
  PUBLISHED
}

enum PostingType {
  INDIVIDUAL
  GROUP
}

enum PostingStatus {
  DRAFT
  PUBLISHED
}

enum Role {
  ADMIN
  VOLUNTEER
  EMPLOYEE
}

enum Language {
  ENGLISH
  FRENCH
  ITALIAN
  CHINESE
  SPANISH
  HINDI
  RUSSIAN
}

model Posting {
  id              Int           @id @default(autoincrement())
  branchId        Int           @map("branch_id")
  branch          Branch        @relation(fields: [branchId], references: [id])
  shifts          Shift[]
  skills          Skill[]
  employees       Employee[]
  title           String
  type            PostingType
  status          PostingStatus
  description     String
  startDate       DateTime      @map("start_date")
  endDate         DateTime      @map("end_date")
  autoClosingDate DateTime      @map("auto_closing_date")
  numVolunteers   Int           @default(1) @map("num_volunteers")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("postings")
}

model Skill {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  postings   Posting[]
  volunteers Volunteer[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("skills")
}

model Branch {
  id         Int         @id @default(autoincrement())
  posting    Posting[]
  name       String      @unique
  employees  Employee[]
  volunteers Volunteer[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("branches")
}

model Shift {
  id        Int      @id @default(autoincrement())
  postingId Int      @map("posting_id")
  posting   Posting  @relation(fields: [postingId], references: [id], onDelete: Cascade)
  startTime DateTime @map("start_time")
  endTime   DateTime @map("end_time")
  signups   Signup[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("shifts")
}

model Signup {
  shift         Shift        @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  shiftId       Int          @map("shifts_id")
  user          User         @relation(fields: [userId], references: [id])
  userId        Int
  status        SignupStatus
  numVolunteers Int          @default(1) @map("num_volunteers")
  note          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@id([shiftId, userId])
  @@map("signups")
}

model Volunteer {
  id          Int       @id
  user        User      @relation(fields: [id], references: [id], onDelete: Cascade)
  branches    Branch[]
  hireDate    DateTime  @map("hire_date")
  skills      Skill[]
  dateOfBirth DateTime? @map("date_of_birth")
  pronouns    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("volunteers")
}

model Employee {
  id        Int       @id
  user      User      @relation(fields: [id], references: [id], onDelete: Cascade)
  branches  Branch[]
  postings  Posting[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("employees")
}

model UserInvite {
  uuid      String   @id @default(uuid())
  email     String   @unique
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_invites")
}
